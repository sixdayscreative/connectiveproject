<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>Worship Database Project</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css">
  <link href="https://fonts.googleapis.com/css?family=Rubik:300,400,400i,500,700&amp;subset=latin-ext" rel="stylesheet">
</head>
<body>
<script src="/build/bundle.js"></script>
<script>

      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          videoId: 'iGpuQ0ioPrM',
          events: {
            'onReady': onPlayerReady
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.mute();
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>

<div id="lyrics_presentation" class="lyrics-presentation">
  <div class="video-background">
    <div class="video-foreground">
      <div id="player"></div>
    </div>
  </div>
    <div class="slides">
      <div class="slide title-slide active">
        <div>
          <h2 class="display-3"><%= song.title %></h2>
          <h5>Songwriter(s): <%= song.author %></h5>
        </div>
      </div><% song.lyrics.forEach(function(verse){ %>
      <div class="slide">
        <ul class="verse">
          <h6><em><%= verse.verseType %></em></h6>
          <% var lines = verse.text.match(/^.*((rn|n|r)|$)/gm);
           lines.forEach(function(line){
             if(line){ %>
            <li class="verse-line display-4"><%= line %></li>
          <% }}) %>
        </ul>
      </div>
        <% }); %></div>
<div class="slide-nav">
  <a href="/songs/<%= song.id %>"><span class="fa fa-3x fa-window-close"></span></a>
  <a href="#" id="fullScreen"><i class="fa fa-3x fa-expand"></i></a>
</div>
</div>
<% include ../partials/scripts %>
<script src="/js/song-present.js"></script>
</body>
</html>
